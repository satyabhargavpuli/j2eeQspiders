<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>How to ignore files in Git without .gitignore</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ckTd92emoho/" /><category term=".gitignore" scheme="searchisko:content:tags" /><category term="accidental file check-in" scheme="searchisko:content:tags" /><category term="developer security" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="git" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><author><name>Heiko Rupp</name></author><id>searchisko:content:id:jbossorg_blog-how_to_ignore_files_in_git_without_gitignore</id><updated>2020-02-25T08:00:43Z</updated><published>2020-02-25T08:00:43Z</published><content type="html">&lt;p&gt;Git has a handy feature when it comes to preventing accidental file check-ins when the files are meant to stay local. The obvious candidates are compiled binaries when you only want to check in the source code. Other candidates are files with local configurations.&lt;/p&gt; &lt;p&gt;One can put all of those files and paths into a &lt;code&gt;.gitignore&lt;/code&gt; file in the project. To persist those changes (and to share the common file contents with collaborators on the project), one usually adds the &lt;code&gt;.gitignore&lt;/code&gt; file to Git like any other file in the project.&lt;/p&gt; &lt;h2&gt;The problem&lt;/h2&gt; &lt;p&gt;Unfortunately, there are limits to this approach. &lt;span id="more-681437"&gt;&lt;/span&gt;Putting local files into the &lt;code&gt;.gitignore&lt;/code&gt; file only works well with items that are common for all collaborators, such as files and directories within the project. Just imagine what would happen if hundreds of collaborators put their specific paths into &lt;code&gt;.gitignore&lt;/code&gt;. That practice would create a huge mess and churn.&lt;/p&gt; &lt;p&gt;Adding file names and paths can also reveal information that should not be public. It could, for example, reveal customer information (this issue is not only about file contents, but also about the customer&amp;#8217;s name, which can reveal information as metadata).&lt;/p&gt; &lt;p&gt;Just not checking in the &lt;code&gt;.gitignore&lt;/code&gt; file can be a pain as well. When one is switching branches or updating the local working tree, one has to often &lt;a href="https://git-scm.com/docs/git-stash" target="_blank" rel="noopener noreferrer"&gt;stash&lt;/a&gt; the file (with local changes), switch the branch, or update and then unstash (potentially with merge conflicts).&lt;/p&gt; &lt;h2&gt;Help is available&lt;/h2&gt; &lt;p&gt;Luckily, Git offers alternative ways to prevent accidental file check-ins. For example, the file &lt;code&gt;.git/info/exclude&lt;/code&gt; works just like &lt;code&gt;.gitignore&lt;/code&gt; on a per-project base. If you need to ignore certain file patterns (e.g., backup files for an exotic editor), you can even use a per-user file like &lt;code&gt;~/.config/git/ignore&lt;/code&gt;. The cool thing is that these files live in areas that Git does not examine. Git will thus not add them to the changeset, so it will not commit and push to a remote.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; These other two files use the &lt;code&gt;.gitignore&lt;/code&gt;format, so you can use wildcards in those as well.&lt;/p&gt; &lt;h2&gt;Listing ignored files&lt;/h2&gt; &lt;p&gt;Git would not be Git if it did not have commands that help you determine if a file or directory is ignored. The first of these commands is &lt;a href="https://git-scm.com/docs/git-ls-files"&gt;&lt;code&gt;git ls-files&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;$ git ls-files --others --exclude-from=.gitignore $ git ls-files --others --exclude-from=.git/info/exclude&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;--others&lt;/code&gt; argument tells the command to show files that are not in the index, and the &lt;code&gt;--exclude-from&lt;/code&gt; is a filter to not show files from its parameter. Thus, the first version shows thus the ignored files that are not listed in the &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Another helpful command is &lt;a href="https://git-scm.com/docs/git-check-ignore"&gt;&lt;code&gt;git check-ignore&lt;/code&gt;&lt;/a&gt;, which requires a path argument. It returns the file name and an exit code of 0 on success. Otherwise, this command exits with a code of 1 if the argument is not in one of the ignore files.&lt;/p&gt; &lt;p&gt;Git has a large set of manual pages that can help you with the commands and files. Most notably for our purpose, you will want to focus on the &lt;a href="https://git-scm.com/docs/gitignore"&gt;&lt;code&gt;gitignore(5)&lt;/code&gt;&lt;/a&gt; page.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#38;linkname=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F25%2Fhow-to-ignore-files-in-git-without-gitignore%2F&amp;#038;title=How%20to%20ignore%20files%20in%20Git%20without%20.gitignore" data-a2a-url="https://developers.redhat.com/blog/2020/02/25/how-to-ignore-files-in-git-without-gitignore/" data-a2a-title="How to ignore files in Git without .gitignore"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/25/how-to-ignore-files-in-git-without-gitignore/"&gt;How to ignore files in Git without .gitignore&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ckTd92emoho" height="1" width="1" alt=""/&gt;</content><summary>Git has a handy feature when it comes to preventing accidental file check-ins when the files are meant to stay local. The obvious candidates are compiled binaries when you only want to check in the source code. Other candidates are files with local configurations. One can put all of those files and paths into a .gitignore file in the project. To persist those changes (and to share the common file ...</summary><dc:creator>Heiko Rupp</dc:creator><dc:date>2020-02-25T08:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/25/how-to-ignore-files-in-git-without-gitignore/</feedburner:origLink></entry><entry><title>Byteman 4.0.11 has been released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/T13SaiHnbwM/byteman-4011-has-been-released.html" /><category term="feed_group_name_byteman" scheme="searchisko:content:tags" /><category term="feed_name_byteman" scheme="searchisko:content:tags" /><author><name>Andrew Dinn</name></author><id>searchisko:content:id:jbossorg_blog-byteman_4_0_11_has_been_released</id><updated>2020-02-24T17:20:00Z</updated><published>2020-02-24T17:20:00Z</published><content type="html">Byteman 4.0.11 is now available from the &lt;a href="http://www.jboss.org/byteman/downloads"&gt;Byteman downloads page&lt;/a&gt; and from the &lt;a href="https://oss.sonatype.org/index.html#nexus-search;quick%7Ebyteman"&gt;Maven Central repository&lt;/a&gt;. It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;br /&gt;&lt;br /&gt;Byteman 4.0.11 is a maintenance release which fixes a build issue introduced in 4.0.10 and corrects a few minor errors in the rule parser. More details are provided in the &lt;a href="http://downloads.jboss.org/byteman/latest/ReleaseNotes.txt"&gt;Release Notes&lt;/a&gt;.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/T13SaiHnbwM" height="1" width="1" alt=""/&gt;</content><summary>Byteman 4.0.11 is now available from the Byteman downloads page and from the Maven Central repository. It is the latest update release for use on all JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes. Byteman 4.0.11 is a maintenance release which fixes a build issue introduced in 4.0.10 and corrects a few minor errors in the rule parser. More details are pro...</summary><dc:creator>Andrew Dinn</dc:creator><dc:date>2020-02-24T17:20:00Z</dc:date><feedburner:origLink>http://bytemanblog.blogspot.com/2020/02/byteman-4011-has-been-released.html</feedburner:origLink></entry><entry><title>C# 8 asynchronous streams</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/N8wVBkCSFE0/" /><category term=".net" scheme="searchisko:content:tags" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term=".NET Core 3.1 SDK" scheme="searchisko:content:tags" /><category term="async streams" scheme="searchisko:content:tags" /><category term="asynchronous enumerables" scheme="searchisko:content:tags" /><category term="C#" scheme="searchisko:content:tags" /><category term="C# 8" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-c_8_asynchronous_streams</id><updated>2020-02-24T08:00:25Z</updated><published>2020-02-24T08:00:25Z</published><content type="html">&lt;p&gt;.NET Core 3.1 (December 2019) includes support for C# 8, a new major&lt;br /&gt; version of the C# programming language. In this series of articles,&lt;br /&gt; we&amp;#8217;ll look at the new features in .NET&amp;#8217;s main programming language. This first article, in particular, looks at asynchronous streams. This feature makes it easy to create and consume asynchronous enumerables, so before getting into the new feature, you first need to understand the IEnumerable interface.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; C# 8 can be used with the .NET Core 3.1 SDK, which is available on &lt;a href="https://access.redhat.com/documentation/en-us/net_core/"&gt;Red Hat Enterprise Linux&lt;/a&gt;, &lt;a href="http://fedoraloves.net/"&gt;Fedora&lt;/a&gt;, &lt;a href="https://dotnet.microsoft.com/download" target="_blank" rel="noopener noreferrer"&gt;Windows, macOS, and on other Linux distributions&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;A brief history of IEnumerable&lt;/h2&gt; &lt;p&gt;The classic &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; has been around since .NET Framework 2 (2005). This interface provides us with a type-safe way to iterate over any collection.&lt;/p&gt; &lt;p&gt;The iteration is based on the &lt;code&gt;IEnumerator&amp;#60;T&amp;#62;&lt;/code&gt; type:&lt;/p&gt; &lt;p&gt;&lt;span id="more-676487"&gt;&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;public interface IEnumerator&amp;#60;T&amp;#62; : IDisposable { bool MoveNext(); T Current; void Reset(); } &lt;/pre&gt; &lt;p&gt;You can see that the &lt;code&gt;MoveNext&lt;/code&gt; method moves us to the next element. It returns &lt;code&gt;true&lt;/code&gt; when there &lt;em&gt;is&lt;/em&gt; an element, and then &lt;code&gt;Current&lt;/code&gt; returns that element. The &lt;code&gt;Reset&lt;/code&gt; method provides a way to reset the iterator to the start. The &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; is &lt;code&gt;IDisposable&lt;/code&gt;, so its implementation might perform resource cleanup. Note that the generic parameter is an &lt;code&gt;out&lt;/code&gt;-parameter. This keyword enables casting the &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; to a base type &lt;code&gt;IEnumerable&amp;#60;TBase&amp;#62;&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;foreach&lt;/code&gt; keyword allows the easy consumption of &lt;code&gt;IEnumerables&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;foreach (var item in myEnumerable) Console.WriteLine($”* {item}”); &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;yield&lt;/code&gt; keyword makes it easy to implement an &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; with a method, and lets the compiler figure out how to implement the interface. For example:&lt;/p&gt; &lt;pre&gt;IEnumerable&amp;#60;int&amp;#62; MyEnumerable { get { for (int i = 0; i &amp;#60; 3; i++) yield return i; yield return 100; } } &lt;/pre&gt; &lt;p&gt;This code causes the compiler to generate a type that implements &lt;code&gt;IEnumerable&amp;#60;int&amp;#62;&lt;/code&gt;, which tracks enough information to know where we are in the &lt;code&gt;[0, 1, 2, 100]&lt;/code&gt; iteration.&lt;/p&gt; &lt;p&gt;The power of &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; shines with C# 3&amp;#8217;s Language-Integrated Query (2007) which allows &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; to be transformed, combined and filtered. For example:&lt;/p&gt; &lt;pre&gt;var queryLondonCustomers = from cust in customers where cust.City == "London" select cust.Name; &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;customers&lt;/code&gt; in this example refer to an &lt;code&gt;IEnumerable&amp;#60;Customer&amp;#62;&lt;/code&gt;. We filter by city, which gives us (again) an &lt;code&gt;IEnumerable&amp;#60;Customer&amp;#62;&lt;/code&gt;. Then, finally, we select the name so our resulting type is an &lt;code&gt;IEnumerable&amp;#60;string&amp;#62;&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Asynchronous streams&lt;/h2&gt; &lt;p&gt;Asynchronous streams use the &lt;code&gt;IAsyncEnumerator&amp;#60;T&amp;#62;&lt;/code&gt; type. This type is similar to &lt;code&gt;IEnumerator&amp;#60;T&amp;#62;&lt;/code&gt;, but with a &lt;code&gt;Move&lt;/code&gt; method that is async (it returns a &lt;code&gt;Task&lt;/code&gt;-like type):&lt;/p&gt; &lt;pre&gt;ValueTask&amp;#60;T&amp;#62; MoveNextAsync(); &lt;/pre&gt; &lt;p&gt;Thanks to the async &lt;code&gt;Move&lt;/code&gt; method, we can now asynchronously wait for the next item. This means that we can wait without blocking a thread. Note that the method returns a &lt;code&gt;ValueTask&lt;/code&gt;, which makes the call allocation-free when the next item is already available. You can read more about &lt;code&gt;ValueTask&lt;/code&gt; in &lt;a href="https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/" target="_blank" rel="noopener noreferrer"&gt;Understanding the Whys, Whats, and Whens of ValueTask&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;code&gt;IAsyncEnumerable&amp;#60;T&amp;#62;&lt;/code&gt; is a good match for events that happen infrequently, or data that is received asynchronously (for example, over the network). Because the &lt;code&gt;IAsyncEnumerable&lt;/code&gt; knows at what rate we are pulling the items, it can be smart about how much data it buffers, and when it asks the upstream source for more data.&lt;/p&gt; &lt;p&gt;As with &lt;code&gt;IEnumerable&amp;#60;T&amp;#62;&lt;/code&gt;, C# provides first-class support for implementing &lt;code&gt;IAsyncEnumerables&lt;/code&gt;. For example:&lt;/p&gt; &lt;pre&gt;static async IAsyncEnumerable&amp;#60;string&amp;#62; GetTopSearchResults(string term) { using var client = new HttpClient(); yield return await client.GetStringAsync($"https://www.google.com?q={term}"); yield return await client.GetStringAsync($"https://www.bing.com?q={term}"); } &lt;/pre&gt; &lt;p&gt;For consuming, we use the &lt;code&gt;await foreach&lt;/code&gt; keyword as you can see in this example:&lt;/p&gt; &lt;pre&gt;await foreach (var item in GetTopSearchResults("test")) { System.Console.WriteLine(item); } &lt;/pre&gt; &lt;h1&gt;Cancellation&lt;/h1&gt; &lt;p&gt;The default pattern for canceling asynchronous methods is by using a &lt;code&gt;CancellationToken&lt;/code&gt;. We can add a &lt;code&gt;CancellationToken&lt;/code&gt; to our method like so:&lt;/p&gt; &lt;pre&gt;static async IAsyncEnumerable GetTopSearchResults(string term, [EnumeratorCancellation]CancellationToken ct = default) { using var client = new HttpClient(); // GetStringAsync doesn't accept a CancellationToken, Dispose the client to cancel. using var ctr = ct.Register(s =&amp;#62; ((HttpClient)s).Dispose(), client); yield return await client.GetStringAsync($"https://www.google.com?q={term}"); yield return await client.GetStringAsync($"https://www.bing.com?q={term}"); } &lt;/pre&gt; &lt;p&gt;We can pass the &lt;code&gt;CancellationToken&lt;/code&gt; as an argument when we invoke the method:&lt;/p&gt; &lt;pre&gt;var cts = new CancellationTokenSource(millisecondsDelay: 1000); await foreach (var result in GetTopSearchResults("dotnet", cts.Token)) &lt;/pre&gt; &lt;p&gt;Or alternatively, we can use the &lt;code&gt;WithCancellation&lt;/code&gt; method, which makes the compiler pass the value to the argument with the &lt;code&gt;EnumeratorCancellation&lt;/code&gt; attribute. For example:&lt;/p&gt; &lt;pre&gt;var cts = new CancellationTokenSource(millisecondsDelay: 1000); await foreach (var result in GetTopSearchResults("dotnet").WithCancellation(cts.Token)) &lt;/pre&gt; &lt;h2&gt;&lt;code&gt;ConfigureAwait(false)&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;When an async method completes asynchronously, it uses the invocation &lt;code&gt;SynchronizationContext&lt;/code&gt; to continue. This feature puts us back into the main UI thread when invoking an async method in a Win32 Forms/WPF application. It facilitates GUI programming because UI controls should only be updated from the UI thread. When this feature is not needed, the overhead can be avoided by adding &lt;code&gt;ConfigureAwait(false)&lt;/code&gt; to the task that is awaited, as you can see here:&lt;/p&gt; &lt;pre&gt;await SomeMethodAsync().ConfigureAwait(false); &lt;/pre&gt; &lt;p&gt;We can apply &lt;code&gt;ConfigureAwait(false)&lt;/code&gt; to the &lt;code&gt;MoveNextAsync&lt;/code&gt; calls that are generated by the &lt;code&gt;foreach&lt;/code&gt; statement like this:&lt;/p&gt; &lt;pre&gt;await foreach (var result in GetTopSearchResults("dotnet").ConfigureAwait(false)) &lt;/pre&gt; &lt;p&gt;Note that this option applies to the &lt;code&gt;MoveNextAsync&lt;/code&gt; calls. You should also add &lt;code&gt;ConfigureAwait(false)&lt;/code&gt; to the awaited methods inside the &lt;code&gt;GetTopSearchResults&lt;/code&gt; method.&lt;/p&gt; &lt;h1&gt;Conclusion&lt;/h1&gt; &lt;p&gt;In this article, you’ve learned how C# 8 async streams makes it easy to create and consume asynchronous enumerables. Async streams is an interesting feature, especially for applications that are consuming data/events that are received from the network. In the next article in this series, we will look at C# 8&amp;#8217;s extended pattern matching.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#38;linkname=C%23%208%20asynchronous%20streams" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F24%2Fc-8-asynchronous-streams%2F&amp;#038;title=C%23%208%20asynchronous%20streams" data-a2a-url="https://developers.redhat.com/blog/2020/02/24/c-8-asynchronous-streams/" data-a2a-title="C# 8 asynchronous streams"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/24/c-8-asynchronous-streams/"&gt;C# 8 asynchronous streams&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/N8wVBkCSFE0" height="1" width="1" alt=""/&gt;</content><summary>.NET Core 3.1 (December 2019) includes support for C# 8, a new major version of the C# programming language. In this series of articles, we’ll look at the new features in .NET’s main programming language. This first article, in particular, looks at asynchronous streams. This feature makes it easy to create and consume asynchronous enumerables, so before getting into the new feature, you first need...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2020-02-24T08:00:25Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/24/c-8-asynchronous-streams/</feedburner:origLink></entry><entry><title>Begginners Guide - Expanding your DevOps toolbox workshop</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3yVup04xGCI/beginners-guilde-expanding-your-devops-toolbox-workshop.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-begginners_guide_expanding_your_devops_toolbox_workshop</id><updated>2020-02-24T06:00:04Z</updated><published>2020-02-24T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="devops beginners guide" border="1" data-original-height="597" data-original-width="1600" height="119" src="https://1.bp.blogspot.com/-CgClKmzwRP0/Xk5k40_FfWI/AAAAAAAAw5s/L_T5c9TfV0Iu1jWL-boikliD3S6pD8gUACEwYBhgL/s320/Screenshot%2B2020-02-20%2Bat%2B11.50.59.png" title="" width="320" /&gt;&lt;/a&gt;The last few months there have been a series of updates to the various open source process automation technologies shared with you over the years in beginners guide workshops.&lt;br /&gt;&lt;br /&gt;These updates require updates to workshop content ensuring you have material that helps with getting hands-on with the latest technology versions.&lt;br /&gt;&lt;br /&gt;Recently, I shared &lt;a href="https://www.schabell.org/2020/02/beginners-guide-hr-rewards-process-automation-workshop.html" target="_blank"&gt;updates to the human resources employee rewards workshop&lt;/a&gt;, where you can get started with the beginners guide to learning about process automation.&lt;br /&gt;&lt;br /&gt;This article continues with another workshop update, one that's focused on sharing new tooling with DevOps communities. &lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;DevOps Heroes workshop&lt;/h3&gt;This workshop is designed to introduce you to a new tool for your devops toolbox. The goal is to install a process automation environment, and build a process automation project integrating DevOps testing into a fictional organization.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-bw0BtCuiFWs/Xk5nGXmUIsI/AAAAAAAAw58/WEQJfIkDDS0wNXPJWI5YNlWq7SGAwTz_gCNcBGAsYHQ/s1600/Screenshot%2B2020-02-20%2Bat%2B11.53.56.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="devops beginners guide" border="0" data-original-height="721" data-original-width="1600" height="144" src="https://1.bp.blogspot.com/-bw0BtCuiFWs/Xk5nGXmUIsI/AAAAAAAAw58/WEQJfIkDDS0wNXPJWI5YNlWq7SGAwTz_gCNcBGAsYHQ/s320/Screenshot%2B2020-02-20%2Bat%2B11.53.56.png" title="" width="320" /&gt;&lt;/a&gt;We'll introduce you along the way to the Red Hat Process Automation Manager and end up with a functional DevOps testing process.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;b&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhpam-devops-workshop/#/7" target="_blank"&gt;Workshop contents&lt;/a&gt;&lt;/b&gt;&lt;/div&gt;&lt;ul style="text-align: left;"&gt;&lt;li&gt;Lab 1 - Install Red Hat Process Automation Manager&lt;/li&gt;&lt;li&gt;Lab 2 - Create a new project&lt;/li&gt;&lt;li&gt;Lab 3 - Create a data model&lt;/li&gt;&lt;li&gt;Lab 4 - Create a guided rule&lt;/li&gt;&lt;li&gt;Lab 5 - Create a process&lt;/li&gt;&lt;li&gt;Lab 6 - Completing process details&lt;/li&gt;&lt;li&gt;Lab 7 - Creating process and task forms&lt;/li&gt;&lt;li&gt;Lab 8 - Running the process&lt;/li&gt;&lt;/ul&gt;With all the latest updates, links to downloads for all needed product tooling on Red Hat Developers, you'll be on your way to adding process automation to your DevOps toolbox in no time.&lt;br /&gt;&lt;br /&gt;If you have any comments and or suggestions while using the workshop, please &lt;a href="https://gitlab.com/bpmworkshop/rhpam-devops-workshop/issues/new" target="_blank"&gt;bring it to our attention&lt;/a&gt;. &lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=smy1upVpci8:qsI1YcsMQ-g:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=smy1upVpci8:qsI1YcsMQ-g:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=smy1upVpci8:qsI1YcsMQ-g:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=smy1upVpci8:qsI1YcsMQ-g:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=smy1upVpci8:qsI1YcsMQ-g:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/smy1upVpci8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3yVup04xGCI" height="1" width="1" alt=""/&gt;</content><summary>The last few months there have been a series of updates to the various open source process automation technologies shared with you over the years in beginners guide workshops. These updates require updates to workshop content ensuring you have material that helps with getting hands-on with the latest technology versions. Recently, I shared updates to the human resources employee rewards workshop, ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-02-24T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/smy1upVpci8/beginners-guilde-expanding-your-devops-toolbox-workshop.html</feedburner:origLink></entry><entry><title>Designing an event-driven process at scale: Part 3</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Slfbt02j8fQ/" /><category term="business process management" scheme="searchisko:content:tags" /><category term="Design Patterns" scheme="searchisko:content:tags" /><category term="digital process automation" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="RHPAM" scheme="searchisko:content:tags" /><author><name>mcarioli</name></author><id>searchisko:content:id:jbossorg_blog-designing_an_event_driven_process_at_scale_part_3</id><updated>2020-02-21T08:00:51Z</updated><published>2020-02-21T08:00:51Z</published><content type="html">&lt;p class="selectionShareable"&gt;In the first article in this series, &lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/"&gt;&lt;em&gt;Designing an event-driven business process at scale: A health management example, Part 1&lt;/em&gt;&lt;/a&gt;, you found the business use case and data model for a concrete example from the health management industry. You then began implementing the example in &lt;a href="https://www.jbpm.org/" target="_blank" rel="noopener noreferrer"&gt;jBPM&lt;/a&gt; (an open source business automation suite) by creating the Trigger process.&lt;/p&gt; &lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/"&gt;the second article&lt;/a&gt;, you implemented the Task subprocess and, among other things, you also configured the call parameters for the Reminder and Escalation subprocesses within the Task subprocess. Now you will implement these subprocesses.&lt;/p&gt; &lt;p&gt;&lt;span id="more-685887"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Reminder subprocess&lt;/h2&gt; &lt;p&gt;You should now create the email reminder subprocess with the properties shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_686347" style="width: 355px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686347" class="wp-image-686347 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-7.png" alt="jBPM Diagram properties section filled out for this subprocess" width="345" height="630" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-7.png 345w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Process-Fig-7-164x300.png 164w" sizes="(max-width: 345px) 100vw, 345px" /&gt;&lt;p id="caption-attachment-686347" class="wp-caption-text"&gt;Figure 1: Assigning properties to the email reminder subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;This subprocess needs the variables shown in Figure 2 to be defined.&lt;/p&gt; &lt;div id="attachment_686617" style="width: 346px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686617" class="wp-image-686617 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-8.png" alt="jBPM section defining the global and process variables for this subprocess" width="336" height="628" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-8.png 336w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-8-161x300.png 161w" sizes="(max-width: 336px) 100vw, 336px" /&gt;&lt;p id="caption-attachment-686617" class="wp-caption-text"&gt;Figure 2: Defining the variables for the email reminder subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, create the process diagram as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_686647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-9.png"&gt;&lt;img aria-describedby="caption-attachment-686647" class="wp-image-686647" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-9.png" alt="the email Reminder subprocess workflow diagram" width="640" height="427" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-9.png 710w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-9-300x200.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-686647" class="wp-caption-text"&gt;Figure 3: Create the email reminder subprocess workflow diagram.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, you need the timer, which causes the email reminder to be executed at the frequency defined in the &lt;code&gt;reminderFrequency&lt;/code&gt; attribute of the &lt;code&gt;Task&lt;/code&gt; object, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_686677" style="width: 444px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686677" class="wp-image-686677 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-16.png" alt="jBPM implementation section with the timer behavior defined" width="434" height="324" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-16.png 434w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-16-300x224.png 300w" sizes="(max-width: 434px) 100vw, 434px" /&gt;&lt;p id="caption-attachment-686677" class="wp-caption-text"&gt;Figure 4: Implementing the email reminder timer.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The email reminder consists of the &lt;a href="https://github.com/kiegroup/jbpm/tree/master/jbpm-workitems/jbpm-workitems-email/src/main/java/org/jbpm/process/workitem/email" target="_blank" rel="noopener noreferrer"&gt;email custom work item handler&lt;/a&gt; that comes pre-installed in jBPM. You can see the service task parameters in Figure 5.&lt;/p&gt; &lt;div id="attachment_686707" style="width: 603px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686707" class="wp-image-686707 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-10.png" alt="jBPM Email Reminder Data I/O, Data Inputs and Assignments section with the values filled in." width="593" height="566" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-10.png 593w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-10-300x286.png 300w" sizes="(max-width: 593px) 100vw, 593px" /&gt;&lt;p id="caption-attachment-686707" class="wp-caption-text"&gt;Figure 5: Define the email reminder service task&amp;#8217;s parameters.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can use &lt;a href="https://gist.github.com/mauriziocarioli/1f753e1de6ef7b15551c08e16a7ff801" target="_blank" rel="noopener noreferrer"&gt;the following on entry action&lt;/a&gt; to set the parameters for the email service task:&lt;/p&gt; &lt;pre&gt;Reminder r = (Reminder)kcontext.getVariable("_Reminder"); kcontext.setVariable("_To",r.getAddress()); kcontext.setVariable("_Subj",r.getSubject()); kcontext.setVariable("_Body",r.getBody()); kcontext.setVariable("_From",r.getFrom());&lt;/pre&gt; &lt;p&gt;Don&amp;#8217;t forget to catch the signal to stop the reminder, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_686737" style="width: 435px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686737" class="wp-image-686737 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-12.png" alt="jBPM Implementation/Execution for Signal &amp;#34;stop_reminder&amp;#34;" width="425" height="203" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-12.png 425w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-12-300x143.png 300w" sizes="(max-width: 425px) 100vw, 425px" /&gt;&lt;p id="caption-attachment-686737" class="wp-caption-text"&gt;Figure 6: Capturing the email reminder&amp;#8217;s stop signal.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;The Escalation subprocess&lt;/h2&gt; &lt;p&gt;This process is the simplest of all. It&amp;#8217;s just a human task as you can see in Figure 7.&lt;/p&gt; &lt;div id="attachment_686747" style="width: 498px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686747" class="wp-image-686747 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-17.png" alt="Diagram showing the Escalation subprocess workflow" width="488" height="175" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-17.png 488w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-17-300x108.png 300w" sizes="(max-width: 488px) 100vw, 488px" /&gt;&lt;p id="caption-attachment-686747" class="wp-caption-text"&gt;Figure 7: The Escalation subprocess.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;The Get the Data service&lt;/h2&gt; &lt;p&gt;The Get the Data service is implemented in the &lt;a href="https://expressjs.com/" target="_blank" rel="noopener noreferrer"&gt;Express&lt;/a&gt; framework on &lt;a href="https://nodejs.org/en/" target="_blank" rel="noopener noreferrer"&gt;node.js&lt;/a&gt; and can be cloned from &lt;a href="https://github.com/mauriziocarioli/PHM-API" target="_blank" rel="noopener noreferrer"&gt;GitHub&lt;/a&gt;. This is a simple REST service with hard-coded responses. Its only purpose is to be used in live demos of the business process described in this series. In a future article, I will show you how to implement this service using business rules. That way, this setting will no longer be hard-coded and it will be easy for nontechnical people to configure the &amp;#8220;triggers&amp;#8221; without involving developer work. Stay tuned!&lt;/p&gt; &lt;p&gt;Here is &lt;a href="https://gist.github.com/mauriziocarioli/bf8e2eca55ce1fa61a8edae7eb8d1c2f" target="_blank" rel="noopener noreferrer"&gt;the &lt;code&gt;app.js&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;const express = require('express') const app = express() const bodyparser = require('body-parser') const port = process.env.PORT || 3200 app.use(bodyparser.json()) app.use( bodyparser.urlencoded({ extended: false }) ) app.get('/get_trigger/:trigger_id/:member_id', (req, res) =&amp;#62; { res.status(200).send([ /** * Getting Provider Info */ { task: { id: 35, origId: 'A490.0', suppressed: false, suppressionPeriod: '', expirationDate: '2020-12-31T12:00:00.000Z', close: 'HARD', reminderInitiation: 'P15D', reminderFrequency: 'R/P15D', escalationTimer: 'P30D', description: 'Getting provider info' }, assignment: { actor: 'Peter', channel: 'MCC', escalationActor: 'Patricia', escalationChannel: 'CCN' }, reminder: { address: 'peter@doctor.com', body: 'XYZ', from: 'PHM@health_insurance.com', subject: 'Reminder' } }, /** * Getting Community Health Worker Info */ { task: { id: 58, origId: 'B143', suppressed: false, suppressionPeriod: '', expirationDate: '2020-12-31T12:00:00.000Z', close: 'HARD', reminderInitiation: 'P30D', reminderFrequency: 'R/P30D', // reminderInitiation : 'PT60S', // reminderFrequency : 'R/PT60S', escalationTimer: 'P90D', // escalationTimer : 'PT60S', decription: 'Getting Community Info' }, assignment: { actor: 'Charlie', channel: 'CCN', escalationActor: 'Marc', escalationChannel: 'CCN' }, reminder: { address: 'charlie@health_insurance.com', body: 'XYZ', from: 'PHM@health_insurance.com', subject: 'Reminder' } }, /** * Getting Member Info */ { task: { id: 128, origId: 'C201', predecessor: 'A490.0', suppressed: false, suppressionPeriod: '', expirationDate: '2020-12-31T12:00:00.000Z', close: 'SOFT', reminderInitiation: 'P7D', reminderFrequency: 'R/P7D', escalationTimer: 'P30D', description: 'Getting member info' }, assignment: { actor: 'Mary', channel: 'MLP', escalationActor: 'Charlie', escalationChannel: 'CCN' }, reminder: { address: 'mary@mail.com', body: 'XYZ', from: 'PHM@health_insurance.com', subject: 'Reminder' } }, /** * Getting Pharmacist Info */ { task: { id: 112, origId: 'C178', predecessor: 'A490.0', suppressed: false, suppressionPeriod: '', expirationDate: '2020-12-31T12:00:00.000Z', close: 'SOFT', reminderInitiation: 'P7D', reminderFrequency: 'R/P7D', escalationTimer: 'P30D', description: 'Geting member info' }, assignment: { actor: 'Robert', channel: 'CCN', escalationActor: 'Matthew', escalationChannel: 'CCN' }, reminder: { address: 'robert@pharmacy.com', body: 'XYZ', from: 'PHM@health_insurance.com', subject: 'Reminder' } } ]) }) app.listen(port, () =&amp;#62; { console.log(`running at port ${port}`) })&lt;/pre&gt; &lt;p&gt;and this is the deployment descriptor &lt;a href="https://gist.github.com/mauriziocarioli/040d6e57439d36fb89a6b9a25ed81392" target="_blank" rel="noopener noreferrer"&gt;in &lt;code&gt;src/main/resources/META-INF/kie-deployment-descriptor.xml&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;work-item-handler&amp;#62; &amp;#60;resolver&amp;#62;mvel&amp;#60;/resolver&amp;#62; &amp;#60;identifier&amp;#62;new org.jbpm.process.workitem.rest.RESTWorkItemHandler(System.getenv("DEMO_REST_USER"), System.getenv("DEMO_REST_PWD"))&amp;#60;/identifier&amp;#62; &amp;#60;parameters/&amp;#62; &amp;#60;name&amp;#62;Rest&amp;#60;/name&amp;#62; &amp;#60;/work-item-handler&amp;#62; &lt;/pre&gt; &lt;h3&gt;The Email service&lt;/h3&gt; &lt;div&gt;This is the deployment descriptor for the &lt;a href="https://gist.github.com/mauriziocarioli/4d75c14c508a1e801ff98b7b566326d5" target="_blank" rel="noopener noreferrer"&gt;Email service task&lt;/a&gt;:&lt;/div&gt; &lt;pre&gt;&amp;#60;work-item-handler&amp;#62; &amp;#60;resolver&amp;#62;mvel&amp;#60;/resolver&amp;#62; &amp;#60;identifier&amp;#62;new org.jbpm.process.workitem.email.EmailWorkItemHandler(System.getenv("DEMO_SMTP_SERVER"), System.getenv("DEMO_SMTP_PORT),System.getenv("DEMO_SMTP_USER"),System.getenv("DEMO_SMTP_PWD"))&amp;#60;/identifier&amp;#62; &amp;#60;parameters/&amp;#62; &amp;#60;name&amp;#62;Email&amp;#60;/name&amp;#62; &amp;#60;/work-item-handler&amp;#62;&lt;/pre&gt; &lt;div&gt;The SMTP server parameters are passed from the environment variables. When trying this task out, one can use an email test service such as &lt;a href="https://mailtrap.io/" target="_blank" rel="noopener noreferrer"&gt;Mailtrap&lt;/a&gt;.&lt;/div&gt; &lt;h2&gt;Considerations when using timers&lt;/h2&gt; &lt;p&gt;By default, jBPM uses &lt;a href="https://docs.jboss.org/author/display/AS72/EJB+3+Reference+Guide" target="_blank" rel="noopener noreferrer"&gt;EJB timer services&lt;/a&gt; to implement timers when deployed on a Java EE (Jakarta EE) server. EJB timers are not recommended for high volume situations. &lt;a href="http://www.quartz-scheduler.org/" target="_blank" rel="noopener noreferrer"&gt;Quartz&lt;/a&gt; is a better alternative and is also available in a Spring Boot deployment.&lt;/p&gt; &lt;p&gt;Another option is to use the service-level agreement (SLA) due date property of a node. This &lt;a href="http://mswiderski.blogspot.com/2018/02/track-your-processes-and-activities.html" target="_blank" rel="noopener noreferrer"&gt;blog&lt;/a&gt; by Maciej Swiderski covers the SLA due date capability in jBPM.&lt;/p&gt; &lt;p&gt;Each capability, whether you choose timers or the SLA, has pros and cons. Make your choice depending on the specifics of your use case. Here, while the number of members may be large, the number of PHM triggers per member in a given time period is typically small. The period of each timer is large (weeks), so the chance of many timers triggering at the same instant is not high.&lt;/p&gt; &lt;h2&gt;Forms&lt;/h2&gt; &lt;p&gt;Data entry forms can be automatically generated for each human task, and for each process. These forms are used mostly for the purpose of testing process execution during development. Typically, the production user interface of a human task is custom made. In this specific use case, the actor of each task should enter data using an existing application that passes the data to jBPM through a REST API exposed by jBPM. Therefore, you will not concern yourself with UI development.&lt;/p&gt; &lt;h2&gt;Event listeners&lt;/h2&gt; &lt;p&gt;The jBPM project is configured to use &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_event_listeners"&gt;event listeners&lt;/a&gt; to trace process and rule information at runtime. If you want to take advantage of event listeners, you need to clone &lt;a href="https://github.com/mauriziocarioli/PHM-Tracing" target="_blank" rel="noopener noreferrer"&gt;the PHM-Tracing&lt;/a&gt; and &lt;a href="https://github.com/mauriziocarioli/Tracing" target="_blank" rel="noopener noreferrer"&gt;Tracing projects&lt;/a&gt;, and then build two jar files to install in the Kie server&amp;#8217;s &lt;code&gt;lib&lt;/code&gt; directory. Otherwise, just &lt;a href="https://gist.github.com/mauriziocarioli/bc5b6c19189a793a6dfae4e5996804fe"&gt;unregister them in the process deployment descriptor&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;event-listeners&amp;#62; &amp;#60;event-listener&amp;#62; &amp;#60;resolver&amp;#62;mvel&amp;#60;/resolver&amp;#62; &amp;#60;identifier&amp;#62;new com.health_insurance.tracing.PHMProcessEventListener()&amp;#60;/identifier&amp;#62; &amp;#60;parameters/&amp;#62; &amp;#60;/event-listener&amp;#62; &amp;#60;event-listener&amp;#62; &amp;#60;resolver&amp;#62;mvel&amp;#60;/resolver&amp;#62; &amp;#60;identifier&amp;#62;new com.health_insurance.tracing.PHMAgendaEventListener()&amp;#60;/identifier&amp;#62; &amp;#60;parameters/&amp;#62; &amp;#60;/event-listener&amp;#62; &amp;#60;/event-listeners&amp;#62; &amp;#60;task-event-listeners&amp;#62; &amp;#60;task-event-listener&amp;#62; &amp;#60;resolver&amp;#62;mvel&amp;#60;/resolver&amp;#62; &amp;#60;identifier&amp;#62;new com.health_insurance.tracing.PHMTaskLifeCycleEventListener()&amp;#60;/identifier&amp;#62; &amp;#60;parameters/&amp;#62; &amp;#60;/task-event-listener&amp;#62; &amp;#60;/task-event-listeners&amp;#62;&lt;/pre&gt; &lt;h2&gt;Demo users&lt;/h2&gt; &lt;p&gt;A shell script is provided in the directory &lt;code&gt;src/main/sh&lt;/code&gt; that creates users and groups to run a few scenarios with this business process. This script is intended to be used with &lt;a href="https://wildfly.org/" target="_blank" rel="noopener noreferrer"&gt;JBoss Wildfly&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You have now implemented your own health management demo of an event-driven process with jBPM that is designed to scale with the complexity of the event logic as well as with the volume of events. By now you should better understand several topics through implementing this process:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Business process abstraction.&lt;/li&gt; &lt;li&gt;Service tasks or work item handlers.&lt;/li&gt; &lt;li&gt;REST API calls from within a process.&lt;/li&gt; &lt;li&gt;Email sending from within a process.&lt;/li&gt; &lt;li&gt;Signal sending and catching.&lt;/li&gt; &lt;li&gt;Timer-based reminders and escalations.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Of course, the design and development of a process are not enough. You certainly would like to see this process in action, as well. The next articles in this series will cover deploying and executing this process.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F21%2Fdesigning-an-event-driven-process-at-scale-part-3%2F&amp;#038;title=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%203" data-a2a-url="https://developers.redhat.com/blog/2020/02/21/designing-an-event-driven-process-at-scale-part-3/" data-a2a-title="Designing an event-driven process at scale: Part 3"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/21/designing-an-event-driven-process-at-scale-part-3/"&gt;Designing an event-driven process at scale: Part 3&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Slfbt02j8fQ" height="1" width="1" alt=""/&gt;</content><summary>In the first article in this series, Designing an event-driven business process at scale: A health management example, Part 1, you found the business use case and data model for a concrete example from the health management industry. You then began implementing the example in jBPM (an open source business automation suite) by creating the Trigger process. In the second article, you implemented the...</summary><dc:creator>mcarioli</dc:creator><dc:date>2020-02-21T08:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/21/designing-an-event-driven-process-at-scale-part-3/</feedburner:origLink></entry><entry><title>This Week in JBoss: February 20, 2020</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bU9__OGEtsQ/this-week-in-jboss-february-20-2020" /><category term="apache-camel" scheme="searchisko:content:tags" /><category term="Drools" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="infinispan" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="keycloak" scheme="searchisko:content:tags" /><category term="springboot" scheme="searchisko:content:tags" /><author><name>Romain Pelisse</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_february_20_2020</id><updated>2020-02-20T12:44:09Z</updated><published>2020-02-20T12:44:09Z</published><content type="html">&lt;!-- [DocumentBodyStart:ad51e209-a314-4400-967d-ec885300da90] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;&lt;em&gt;Welcome to another installment of our JBoss editorial, but also our last on the jboss.org. Indeed, we&amp;#8217;ll be migrating the editorial to the Red Hat developer blog quite soon (as jboss.org is no longer hosting blogs). Don&amp;#8217;t worry, you won&amp;#8217;t even need to update your feed, we&amp;#8217;ll provide a redirect&amp;hellip; And now, to the news of the last two weeks&amp;hellip;&lt;/em&gt;&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;h1&gt;So long, jboss.org! Thanks for all the fish...&lt;/h1&gt;&lt;p&gt;As you may be already aware, this website will become readonly on the 3rd of March. That&amp;#8217;s why many projects have been moving their blog to a new location. That being said, don&amp;#8217;t worry, the editorial will carry on, simply on another platform. We&amp;#8217;ll provide redirect to play and I&amp;#8217;ll ensure a smooth transition for all our reader. (Feel free to &lt;a class="jive-link-email-small" href="mailto:belaran@redhat.com" rel="nofollow"&gt;ping me&lt;/a&gt; if you run into any trouble).&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Riding the (Apache) Camel (3)&lt;/h1&gt;&lt;p&gt;&lt;a href="https://2.bp.blogspot.com/-DkmhaDZFDwQ/Wqt37v7ZczI/AAAAAAAABmw/LNMUMUtZ9FcUrakjYSmT94kjmqG5MXrdwCLcBGAs/s1600/logo-medium-d.png"&gt;&lt;img alt="Apache Camel Logo" class="image-1 jive-image" src="https://2.bp.blogspot.com/-DkmhaDZFDwQ/Wqt37v7ZczI/AAAAAAAABmw/LNMUMUtZ9FcUrakjYSmT94kjmqG5MXrdwCLcBGAs/s1600/logo-medium-d.png" style="height: auto; display: block; margin-left: auto; margin-right: auto;"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;With the recent release of Camel 3, it&amp;#8217;s time to ride again the desert animal and explore its (newly) acquired features! Fortunately, Claus Ibsen has thought of that and he released a series of articles on Camel core optimization:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/01/apache-camel-31-more-camel-core_30.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming (Part 2)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2020/02/apache-camel-31-more-camel-core.html" rel="nofollow"&gt;Apache Camel 3.1 - More camel-core optimizations coming (Part 3)&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Also, don't forget that &lt;a class="jive-link-external-small" href="https://camel.apache.org/camel-quarkus/latest/" rel="nofollow"&gt;Apache Camel is supported by Quarkus&lt;/a&gt;. Maybe a nice way to expore (or explore again) using Camel ?&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Techbytes&lt;/h1&gt;&lt;p style="font-size: 0.9rem; font-style: italic; text-align: center;"&gt;&lt;a href="https://farm1.staticflickr.com/29/46133650_c4649939b0_b.jpg"&gt;&lt;img alt="IMG_1322" height="15%" src="https://farm1.staticflickr.com/29/46133650_c4649939b0_b.jpg" style="display: block; margin-left: auto; margin-right: auto;" width="15%"/&gt;&lt;/a&gt;&lt;a class="jive-link-external-small" href="https://www.flickr.com/photos/83429360@N00/46133650" rel="nofollow"&gt;Image&lt;/a&gt;&lt;span&gt; by &lt;a class="jive-link-external-small" href="https://www.flickr.com/photos/83429360@N00" rel="nofollow"&gt;markwgallagher&lt;/a&gt;&lt;/span&gt; is licensed under &lt;a class="jive-link-external-small" href="https://creativecommons.org/licenses/by/2.0/?ref=ccsearch&amp;amp;atype=html" rel="nofollow"&gt;CC BY 2.0&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;If you are interested in process management with Drools and jBPM, we hope you have not missed this article on &lt;a class="jive-link-external-small" href="http://blog.athico.com/2020/02/pmml-revisited.html" rel="nofollow"&gt;Drools &amp;amp; jBPM: PMML revisited&lt;/a&gt;! Also, the last two weeks brought you a threat as you have an interesting two-parts article waiting for you :&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/" rel="nofollow"&gt;Designing an event-driven business process at scale: A health management example, Part 1 - Red Hat Developer&lt;/a&gt; &lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/" rel="nofollow"&gt;Designing an event-driven process at scale: Part 2 - Red Hat Developer&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It&amp;#8217;s no secret that handling &amp;hellip; secrets is one of the most challenging topics when it comes to software deployment. With that in mind, you&amp;#8217;ll love to learn more on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/14/using-secrets-in-apache-kafka-connect-configuration/" rel="nofollow"&gt;Using secrets in Kafka Connect configuration&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;Evangelist's Corner&lt;/h1&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As always, our very own Eric D. Schabell has been quite productive in the last weeks. He released an article on &lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" rel="nofollow"&gt;Integrating with SaaS Applications - Example CRM Integration&lt;/a&gt; along with a&lt;a class="jive-link-external-small" href="https://www.schabell.org/2020/02/beginners-guide-hr-rewards-process-automation-workshop.html" rel="nofollow"&gt; Beginners Guide - HR Employee Rewards Process Automation Workshop&lt;/a&gt; ! Have fun with those!&lt;/p&gt;&lt;h1&gt;&lt;/h1&gt;&lt;h1&gt;Releases, releases, releases...&lt;/h1&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It would not be another week in JBoss without at least a pair of new releases :&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://infinispan.org/blog/2020/02/10/2020-02-10-spring-boot-release-2.2.x/" rel="nofollow"&gt;Blog: Infinispan Spring Boot Starter released with Spring Boot 2.2.4.RELEASE - Infinispan&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="https://www.keycloak.org/2020/02/keycloak-900-released.html" rel="nofollow"&gt;Keycloak - Blog - Keycloak 9.0.0 released&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h1&gt;D&amp;eacute;caf'&lt;/h1&gt;&lt;p&gt;If you want to take a peek outside our usual Java world, you might find this article on &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2020/02/13/openshift-actions-deploy-to-red-hat-openshift-directly-from-your-github-repository/" rel="nofollow"&gt;OpenShift Actions: Deploy to Red Hat OpenShift directly from your GitHub repository&lt;/a&gt; quite compelling, but most importantly, quite useful if you deploy on OpenShift!&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;em&gt;That's all for another edition of the JBoss Editorial, please join us again for more exciting development from the JBoss Communities.&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:ad51e209-a314-4400-967d-ec885300da90] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bU9__OGEtsQ" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another installment of our JBoss editorial, but also our last on the jboss.org. Indeed, we’ll be migrating the editorial to the Red Hat developer blog quite soon (as jboss.org is no longer hosting blogs). Don’t worry, you won’t even need to update your feed, we’ll provide a redirect… And now, to the news of the last two weeks… So long, jboss.org! Thanks for all the fish... As you may be...</summary><dc:creator>Romain Pelisse</dc:creator><dc:date>2020-02-20T12:44:09Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2020/02/20/this-week-in-jboss-february-20-2020</feedburner:origLink></entry><entry><title>Infinispan Server configuration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fTmlZlbs-Lw/" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>Tristan Tarrant</name></author><id>searchisko:content:id:jbossorg_blog-infinispan_server_configuration</id><updated>2020-02-20T14:28:06Z</updated><published>2020-02-20T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x. One of the big differences is that the new server’s configuration is just an extension of the embedded configuration.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The XML snippet below shows the configuration used by the server "out-of-the-box":&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt; &lt;span class="content"&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:server&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;statistics&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;transport&lt;/span&gt; &lt;span class="attribute-name"&gt;cluster&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;stack&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;node-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;server&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="3"&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;inet-address&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.address:127.0.0.1}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class="attribute-name"&gt;default-interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port-offset&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="4"&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;memcached&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;11221&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="5"&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="comment"&gt;&amp;lt;!-- Uncomment to enable TLS on the realm --&amp;gt;&lt;/span&gt; &lt;span class="comment"&gt;&amp;lt;!-- server-identities&amp;gt; &amp;lt;ssl&amp;gt; &amp;lt;keystore path="application.keystore" relative-to="infinispan.server.config.path" keystore-password="password" alias="server" key-password="password" generate-self-signed-certificate-host="localhost"/&amp;gt; &amp;lt;/ssl&amp;gt; &amp;lt;/server-identities--&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;groups-attribute&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Roles&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;users.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;plain-text&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;groups.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;i class="conum" data-value="6"&gt;&lt;/i&gt;&lt;b&gt;(6)&lt;/b&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/server&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Let’s have a look at the various elements, describing their purposes:&lt;/p&gt; &lt;/div&gt; &lt;div class="colist arabic"&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="1"&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;cache-container&lt;/code&gt; element is a standard Infinispan cache manager configuration like you’d use in embedded deployments. You can decide to leave it empty and create any caches at runtime using the CLI, Console or Hot Rod and RESTful APIs, or statically predefine your caches here.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="2"&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;server&lt;/code&gt; element holds the server-specific configuration which includes network, security and protocols.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="3"&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;interface&lt;/code&gt; element declares named interfaces which are associated with specific addresses/interfaces. The default &lt;code&gt;public&lt;/code&gt; interface will use the loopback address &lt;code&gt;127.0.0.1&lt;/code&gt; unless overridden with the &lt;code&gt;-b&lt;/code&gt; switch or the &lt;code&gt;infinispan.bind.address&lt;/code&gt; system property. Refer to &lt;a href="https://infinispan.org/docs/stable/titles/server/server.html#server_interfaces-server"&gt;server interfaces&lt;/a&gt; documentation for a detailed list of all possible ways of selecting an address.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="4"&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;socket-bindings&lt;/code&gt; element associates addresses and ports with unique names you can use later on configuring the protocol endpoints. For convenience, a &lt;em&gt;port offset&lt;/em&gt; can be added to all port numbers to ease starting multiple servers on the same host. Use the &lt;code&gt;-o&lt;/code&gt; switch or the &lt;code&gt;infinispan.socket.binding.port-offset&lt;/code&gt; system property to change the offset.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="5"&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;security&lt;/code&gt; element configures the server’s realms and identities. We will ignore this for now as this deserves its own dedicated blog post in the near future.&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;i class="conum" data-value="6"&gt;&lt;/i&gt;&lt;b&gt;6&lt;/b&gt;&lt;/td&gt; &lt;td&gt;The &lt;code&gt;endpoints&lt;/code&gt; element configures the various protocol servers. Unless overridden, all sub protocols are aggregated into a &lt;em&gt;single-port&lt;/em&gt; endpoint which, as its name suggests, listens on a single port and automatically detects the incoming protocol, delegating to the appropriate handler.&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;code&gt;rest-connector&lt;/code&gt; has a special role in the new server, since it now also handles administrative tasks. It is therefore required if you want to use the CLI or the Console. You may wish to have the protocols listen on different ports, as outlined in the configuration below:&lt;/p&gt; &lt;/div&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight nowrap"&gt;&lt;code data-lang="xml"&gt;&lt;span class="tag"&gt;&amp;lt;infinispan&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:xsi&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;http://www.w3.org/2001/XMLSchema-instance&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xsi:schemaLocation&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1 https://infinispan.org/schemas/infinispan-config-10.1.xsd&lt;/span&gt; &lt;span class="content"&gt;urn:infinispan:server:10.1 https://infinispan.org/schemas/infinispan-server-10.1.xsd&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:config:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns:server&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;cache-container&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;statistics&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;transport&lt;/span&gt; &lt;span class="attribute-name"&gt;cluster&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.name}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;stack&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.cluster.stack:tcp}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;node-name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.node.name:}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/cache-container&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;server&lt;/span&gt; &lt;span class="attribute-name"&gt;xmlns&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;urn:infinispan:server:10.1&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;match-interface&lt;/span&gt; &lt;span class="attribute-name"&gt;value&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;eth0&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;interface&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;loopback&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interface&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/interfaces&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-bindings&lt;/span&gt; &lt;span class="attribute-name"&gt;default-interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port-offset&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.socket.binding.port-offset:0}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;socket-binding&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;interface&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;port&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;${infinispan.bind.port:11222}&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/socket-bindings&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;security-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;properties-realm&lt;/span&gt; &lt;span class="attribute-name"&gt;groups-attribute&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;Roles&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;user-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;users.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;plain-text&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;true&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;group-properties&lt;/span&gt; &lt;span class="attribute-name"&gt;path&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;groups.properties&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;relative-to&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;infinispan.server.config.path&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/properties-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realm&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security-realms&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;endpoints&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;admin&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;security-realm&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;default&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;hotrod-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;hotrod&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt; &lt;span class="attribute-name"&gt;socket-binding&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;public&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;rest-connector&lt;/span&gt; &lt;span class="attribute-name"&gt;name&lt;/span&gt;=&lt;span class="string"&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;span class="content"&gt;rest&lt;/span&gt;&lt;span class="delimiter"&gt;"&lt;/span&gt;&lt;/span&gt;&lt;span class="tag"&gt;/&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/endpoints&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/server&amp;gt;&lt;/span&gt; &lt;span class="tag"&gt;&amp;lt;/infinispan&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This creates two &lt;em&gt;socket bindings&lt;/em&gt;, one named &lt;strong&gt;public&lt;/strong&gt; bound to the &lt;code&gt;eth0&lt;/code&gt; interface and one named &lt;strong&gt;admin&lt;/strong&gt; bound to the loopback interface. The server will therefore listen for Hot Rod traffic only on the &lt;strong&gt;public&lt;/strong&gt; network and for HTTP/REST traffic on the &lt;strong&gt;admin&lt;/strong&gt; network.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For more details on how to configure Infinispan Server, refer to our &lt;a href="https://infinispan.org/docs/stable/titles/server/server.html"&gt;documentation&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;In the next blog post we will have an in-depth look at security.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fTmlZlbs-Lw" height="1" width="1" alt=""/&gt;</content><summary>The new Infinispan Server introduced in version 10.0 is quite different from the WildFly-based one we had up to 9.x. One of the big differences is that the new server’s configuration is just an extension of the embedded configuration. The XML snippet below shows the configuration used by the server "out-of-the-box": xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ...</summary><dc:creator>Tristan Tarrant</dc:creator><dc:date>2020-02-20T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/02/20/2020-02-20-server-config/</feedburner:origLink></entry><entry><title>PMML revisited</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XTEVuDaK1yQ/pmml-revisited.html" /><category term="feed_group_name_drools" scheme="searchisko:content:tags" /><category term="feed_name_drools" scheme="searchisko:content:tags" /><author><name>Gabriele Cardosi</name></author><id>searchisko:content:id:jbossorg_blog-pmml_revisited</id><updated>2020-02-20T09:46:31Z</updated><published>2020-02-20T09:46:00Z</published><content type="html">Hi folks! The beginning of this year brings with it the initiative to re-design the Drools PMML module.&lt;br /&gt;In this post I will describe how we are going to approach it, what's the current status, ideas for future development, etc. etc so... stay tuned!&lt;br /&gt;&lt;h2&gt;&lt;/h2&gt;&lt;h2&gt;Background&lt;/h2&gt;&lt;a href="https://en.wikipedia.org/wiki/Predictive_Model_Markup_Language" rel="noopener" target="_blank"&gt;PMML&lt;/a&gt; is a standard whose aim is to "&lt;em&gt;provide a way for analytic applications to describe and exchange predictive models produced by data mining and machine learning algorithms.&lt;/em&gt;" &lt;a href="http://dmg.org/pmml/v4-4/GeneralStructure.html" rel="noopener" target="_blank"&gt;PMML standard&lt;/a&gt; defines a series of models that are managed, and we will refer to them as "Model".&lt;br /&gt;The maybe-not so obvious consequence of this is that, said differently, PMML may be thought as an &lt;i&gt;orchestrator&lt;/i&gt; of different predictive models, each of which with different requirements.&lt;br /&gt;Drools has its own PMML implementation. The original design of it was 100% drools-engine based, but in the long term this proved to be not so satisfactory for all the models, so a decision has taken to implement a new version with a different approach. And here the current story begin...&lt;br /&gt;&lt;h2&gt;Requirements&lt;/h2&gt;To the bare-bone essence, what a PMML implementation should allow is to:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;load a PMML file (xml format)&lt;/li&gt;&lt;li&gt;submit input data to it&lt;/li&gt;&lt;li&gt;returns predicted values&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Sounds simple, doesn't it?&amp;nbsp;&lt;/div&gt;&lt;h2&gt;Approach&lt;/h2&gt;The proposed architecture aims at fulfilling the requirements in a modular way, following &lt;a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html"&gt;“Clean Architecture”&lt;/a&gt; principles.&lt;br /&gt;To achieve that, components are defined with clear boundaries and visibility.&lt;br /&gt;General idea is that there are specific tasks strictly related to the core functionality that should be kept agnostic by other “outer” features.&lt;br /&gt;Whoever wanting to deep delve in the matter may read the book "Clean Architecture" by R. C. Martin, but in the essence it is just a matter to apply good-ol' design principles to the overall architecture.&lt;br /&gt;With this target clearly defined, the steps required to achieve it are:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;identify the core-logic and the implementation details (model-specific)&lt;/li&gt;&lt;li&gt;implement the core-logic inside "independent" modules&lt;/li&gt;&lt;li&gt;write code for the model-specific modules&lt;/li&gt;&lt;/ol&gt;We choose to implement a &lt;a href="https://martinfowler.com/eaaCatalog/plugin.html" rel="noopener" target="_blank"&gt;plugin pattern&amp;nbsp;&lt;/a&gt; to bind the core-logic to the model-specific implementations mostly for two reasons:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;incremental development and overall code-management: the core module itself does not depend on any of the model-specific implementations, so the latter may be provided/updated/replaced incrementally without any impact on the core&lt;/li&gt;&lt;li&gt;possibility to replace the provided implementation with a custom one&lt;/li&gt;&lt;li&gt;we also foresee the possibility to choose an implementation at runtime, depending on the original PMML structure (e.g. it may make sense to use a different implementation depending on the size of the given PMML)&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;(I cheated: those are three)&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;&lt;b&gt;Models&lt;/b&gt;&lt;/h2&gt;&lt;h4&gt;&lt;b&gt;KiePMMLModel&lt;/b&gt;&lt;/h4&gt;&lt;ol&gt;&lt;li&gt;This is the definition of Kie-representation of the original PMML model.&lt;/li&gt;&lt;li&gt;For every actual model there is a specific implementation, and it may be any kind of object (java map, drools rule, etc).&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Could we avoid it? Maybe. We could use the model directly generated by the specification' xsd. But this has been designed to describe &lt;i&gt;all&lt;/i&gt; the predictive models, while any of them may use it in different way and with different convention; so this&amp;nbsp;&lt;i&gt;internal view&lt;/i&gt; will represent exactly what is needed for each specific model.&lt;/div&gt;&lt;h4&gt;Components&lt;/h4&gt;We identified the following main functional components:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Compiler&lt;/li&gt;&lt;li&gt;Assembler&lt;/li&gt;&lt;li&gt;Executor&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;Compiler&lt;/h4&gt;This component read the original PMML file and traslate it to our internal format.&lt;br /&gt;The core-side of it simply unmarshall the xml data into Java object. Then, it uses java SPI to retrieve the model-compiler specific for the given PMML model (if it does not find one, the PMML is simply ignored).&lt;br /&gt;Last, the retrieved model-compiler will “translate” the original PMML model to our model-specific representation (&lt;em&gt;KiePMMLModels&lt;/em&gt;).&lt;br /&gt;The &lt;em&gt;core-side&lt;/em&gt; part of this component has no direct dependence on any specific &lt;i&gt;Model Compiler implementation&lt;/i&gt; and not even with anything drools/kie related - so basically it is a lightweight/standalone library.&lt;br /&gt;This component may be invoked at &lt;em&gt;runtime &lt;/em&gt;(i.e. during the execution of the customer project), if its execution is not time-consuming, or during the compilation of the kjar (e.g. for drools-implemented models).&lt;br /&gt;&lt;h4&gt;Assembler&lt;/h4&gt;This component stores &lt;em&gt;KiePMMLModels&lt;/em&gt; created by the &lt;i&gt;Compiler&lt;/i&gt; inside KIE knowledge base. None of the other components should have any dependency/knowledge of this one.&lt;br /&gt;In turns, it must not have any dependency/knowledge/reference on actual &lt;i&gt;Model Compiler implementations.&lt;/i&gt;&lt;br /&gt;&lt;h4&gt;&lt;b&gt;Executor&lt;/b&gt;&lt;/h4&gt;This component is responsible for actual execution of PMML models. It receives the PMML input data, retrieves the KiePMMLModel specific for the input data and calculates the output.&lt;br /&gt;For each model there will be a specific “executor”, to allow different kinds of execution implementation (drools, external library, etc) depending on the model type.&lt;br /&gt;The core-side of it simply receives the input data and retrieve the model-executor specific for the given PMML model (if it does not find one, the PMML is simply ignored).&lt;br /&gt;Last, the retrieved model-executor will evaluate the prediction based on the input data.&lt;br /&gt;The &lt;em&gt;core-side&lt;/em&gt; part of this component has no direct dependence on any specific &lt;i&gt;Model Executor implementation,&lt;/i&gt; but of course is strictly dependent on the drool runtime.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;img alt="CleanPMMLArchitecture" class="alignnone wp-image-703" height="632" src="https://blogtechcardosi.files.wordpress.com/2020/02/cleanpmmlarchitecture.png" style="margin-left: auto; margin-right: auto;" width="632" /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Overall Architecture&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;Model implementations&lt;/h2&gt;&lt;h3&gt;Drools-based models&lt;/h3&gt;&lt;div&gt;Some models will delegate to the drools-engine to allow best performance under heavy load. Here are some details about general scheme for such implementations.&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;the &lt;i&gt;compiler&lt;/i&gt;&amp;nbsp;is invoked at kjar generation (or during runtime for hot-loading of PMML file)&lt;/li&gt;&lt;li&gt;the &lt;i&gt;compiler&lt;/i&gt; reads the PMML file and transform it to "descr" object (see&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/main/java/org/drools/compiler/lang/descr/BaseDescr.java" rel="noopener" target="_blank"&gt;BaseDescr&lt;/a&gt;,&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/main/java/org/drools/compiler/lang/api/DescrFactory.java" rel="noopener" target="_blank"&gt;DescrFactory&lt;/a&gt;,&amp;nbsp;&lt;a href="https://github.com/kiegroup/drools/blob/master/drools-compiler/src/test/java/org/drools/compiler/lang/api/DescrBuilderTest.java" rel="noopener" target="_blank"&gt;DescrBuilderTest&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;regardless of how the &lt;i&gt;model-compiler&lt;/i&gt; is invoked, the &lt;i&gt;drools compiler&lt;/i&gt; must be invoked soon after it to have java-class generated based on the&amp;nbsp;&lt;em&gt;descr&lt;/em&gt;&amp;nbsp;object&lt;/li&gt;&lt;li&gt;the &lt;i&gt;assembler&lt;/i&gt; put the generated classes in the kie base&lt;/li&gt;&lt;li&gt;the &lt;i&gt;executor&lt;/i&gt; loads the "drools-model" generated and invoke it with the input parameters&lt;/li&gt;&lt;/ol&gt;&lt;h4&gt;DRL details&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;for each field in the DataDictionary, a specific DataType has to be defined&lt;/li&gt;&lt;li&gt;for each branch/leaf of the tree, a full-path rule has to be generated (i.e. a rule with the path to get to it - e.g. "sunny", "sunny_temperature", "sunny_temperature_humidity")&lt;/li&gt;&lt;li&gt;a "status-holder" object is created and contains the value of the rule fired - changing that value will fire the children branch/leaf rules matching it (e.g. the rule "sunny" will fire "sunny_temperature" that - in turns - will fire "sunny_temperature_humidity")&lt;/li&gt;&lt;li&gt;such "status-holder"&amp;nbsp;&lt;em&gt;may&lt;/em&gt;&amp;nbsp;contain informations/partial result of evaluation, to be eventually used where combination of results is needed&lt;/li&gt;&lt;li&gt;missing value strategy&amp;nbsp;&lt;em&gt;may&lt;/em&gt;&amp;nbsp;be implemented inside the status holder or as exploded rules&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Testing&lt;/h3&gt;&lt;div&gt;For each model there will be a set of standard unit tests to mostly verify &amp;nbsp;individual units of code. Beside that, inside the model-specific module (yes, it &lt;b&gt;is&lt;/b&gt; a tongue twister) there will be an &lt;i&gt;integration-test &lt;/i&gt;submodule. This latter will verify the overall correct execution of different, more or less complex,&amp;nbsp;PMML files, to simulate as much as possible what may happen in real-world scenarios.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Regression&lt;/h3&gt;Regression model is the first one to&amp;nbsp;have been implemented. Due to its inherent simplicity, we choose to provide a pure java-based implementation for it. For the moment being it is still under PR, and new full tests are being added.&lt;br /&gt;&lt;h3&gt;Tree&lt;/h3&gt;After evaluating all the pros/cons, we decided that this model could be a good candidate to be implemented with a drools-based approach. Being also a simple model to follow, we choose to use it as first test for drools approach.&lt;br /&gt;&lt;br /&gt;&lt;h2&gt;TO-DOs&lt;/h2&gt;This is a list of missing features that are not implemented, yet, and not strictly-related to a specific model. It will be (well, it should be) updated during the development:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Setup &lt;i&gt;Benchmarking&lt;/i&gt; skeleton project (see&amp;nbsp; &lt;a href="https://github.com/kiegroup/kie-benchmarks/tree/master/drools-benchmarks" target="_blank"&gt;Drools Benchmark&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Manage &lt;i&gt;Extension&lt;/i&gt; tags (see &lt;a href="http://dmg.org/pmml/v4-4/GeneralStructure.html#xsdElement_Extension" target="_blank"&gt;xsdElement_Extension&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Manage &lt;i&gt;SimpleSetPredicate&lt;/i&gt;&amp;nbsp;tags (see &lt;a href="http://dmg.org/pmml/v4-4/TreeModel.html#xsdElement_SimplePredicate" target="_blank"&gt;SimpleSetPredicate&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Implement &lt;a href="http://dmg.org/pmml/v4-4/MultipleModels.html#xsdElement_VariableWeight" target="_blank"&gt;VariableWeight&lt;/a&gt;&amp;nbsp;inside &lt;i&gt;Segment&lt;/i&gt;&amp;nbsp;(dynamic alternative to static "weight" value)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Needless to say that any comment (especially nice ones) and suggestion will be greatly appreciated.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Come back in the following days and see what's next!&amp;nbsp;&lt;/div&gt;&lt;div&gt;Bye!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:dnMXMwOfBR0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=dnMXMwOfBR0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?i=hm7B40DidXY:G3VV2tAqMp4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.athico.com/~ff/DroolsAtom?a=hm7B40DidXY:G3VV2tAqMp4:jWeZv7XsJd0"&gt;&lt;img src="http://feeds.feedburner.com/~ff/DroolsAtom?d=jWeZv7XsJd0" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/DroolsAtom/~4/hm7B40DidXY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XTEVuDaK1yQ" height="1" width="1" alt=""/&gt;</content><summary>Hi folks! The beginning of this year brings with it the initiative to re-design the Drools PMML module. In this post I will describe how we are going to approach it, what's the current status, ideas for future development, etc. etc so... stay tuned! BackgroundPMML is a standard whose aim is to "provide a way for analytic applications to describe and exchange predictive models produced by data mini...</summary><dc:creator>Gabriele Cardosi</dc:creator><dc:date>2020-02-20T09:46:00Z</dc:date><feedburner:origLink>http://feeds.athico.com/~r/DroolsAtom/~3/hm7B40DidXY/pmml-revisited.html</feedburner:origLink></entry><entry><title>Designing an event-driven process at scale: Part 2</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/SwLTai92w4I/" /><category term="business process management" scheme="searchisko:content:tags" /><category term="Design Patterns" scheme="searchisko:content:tags" /><category term="event-driven" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="health management" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="task implementation" scheme="searchisko:content:tags" /><author><name>mcarioli</name></author><id>searchisko:content:id:jbossorg_blog-designing_an_event_driven_process_at_scale_part_2</id><updated>2020-02-20T08:00:31Z</updated><published>2020-02-20T08:00:31Z</published><content type="html">&lt;p&gt;In the first article in this series, &lt;a href="https://developers.redhat.com/blog/2020/02/19/designing-an-event-driven-business-process-at-scale-a-health-management-example-part-1/"&gt;&lt;em&gt;Designing an event-driven business process at scale: A health management example, Part 1&lt;/em&gt;&lt;/a&gt;, we began by defining the business use case and data model for a concrete example from the health management industry. We then began implementing the example in &lt;a href="https://www.jbpm.org/" target="_blank" rel="noopener noreferrer"&gt;jBPM&lt;/a&gt; (an open source business automation suite) by creating our trigger process.&lt;/p&gt; &lt;p&gt;Now, in the second article in this series, we will focus on creating the Task subprocess and its many components. In our case, these are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The Expired? gate&lt;/li&gt; &lt;li&gt;The Suppressed? gate&lt;/li&gt; &lt;li&gt;The human task&lt;/li&gt; &lt;li&gt;The Reminder subprocess&lt;/li&gt; &lt;li&gt;The &amp;#8220;What type of close?&amp;#8221; gate&lt;/li&gt; &lt;li&gt;The Hard Close embedded subprocess&lt;/li&gt; &lt;li&gt;The Escalation subprocess&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span id="more-685907"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;The Task subprocess&lt;/h2&gt; &lt;p&gt;Now you can create the Task subprocess with the properties shown in Figure 1.&lt;/p&gt; &lt;div id="attachment_684737" style="width: 448px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-684737" class="wp-image-684737 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1.png" alt="jBPM Diagram properties section, Process subsection" width="438" height="584" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1.png 438w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-A490-1-225x300.png 225w" sizes="(max-width: 438px) 100vw, 438px" /&gt;&lt;p id="caption-attachment-684737" class="wp-caption-text"&gt;Figure 1: Create the Task subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The Task subprocess needs the variables shown in Figure 2 to be defined.&lt;/p&gt; &lt;div id="attachment_685337" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685337" class="wp-image-685337" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001.jpg" alt="jBPM Process Data section, defining process variables" width="640" height="274" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001.jpg 889w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001-300x128.jpg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0001-768x328.jpg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-685337" class="wp-caption-text"&gt;Figure 2: Define the variables for your Task subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; The type &lt;code&gt;com.jbpm.document.Document&lt;/code&gt; of the variable &lt;code&gt;sSupplementalData&lt;/code&gt; is available out of the box.&lt;/p&gt; &lt;p&gt;Now, draw the diagram for the Task subprocess, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_685367" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685367" class="wp-image-685367 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210.png" alt="the task subprocess diagram in jBPM" width="640" height="280" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210.png 640w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-210-300x131.png 300w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;p id="caption-attachment-685367" class="wp-caption-text"&gt;Figure 3: Create your Task subprocess diagram.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once the process variables are initialized in a script task, a &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_user_task" target="_blank" rel="noopener noreferrer"&gt;user task&lt;/a&gt; must be completed. A reminder is set for the completion of the user task and an escalation is defined. Both the reminder and the escalation are implemented with &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_timers" target="_blank" rel="noopener noreferrer"&gt;timers&lt;/a&gt; that lead to subprocesses that you need to implement. See below for a &lt;a href="https://maucarba.blogspot.com/2019/12/process-management-or-case-management.html#ConsiderationsWhenUsingTimers"&gt;note concerning timers from a scalability perspective&lt;/a&gt;.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note:&lt;/strong&gt; We implemented the task suppression requirement using a timer as well.&lt;/p&gt; &lt;p&gt;The hard close requirement is realized as an embedded subprocess that is simply catching a signal. Following the requirements, the escalation occurs due to a timer on this subprocess.&lt;/p&gt; &lt;h3&gt;The Expired? gate&lt;/h3&gt; &lt;p&gt;The Expired? exclusive gate should have two branches configured using the &lt;code&gt;expirationDate&lt;/code&gt; attribute of the Task class, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_685387" style="width: 239px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685387" class="wp-image-685387 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211.png" alt="jBPM diagram showing the expired gate in place" width="229" height="301" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211.png 229w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-211-228x300.png 228w" sizes="(max-width: 229px) 100vw, 229px" /&gt;&lt;p id="caption-attachment-685387" class="wp-caption-text"&gt;Figure 4: Checking if the task is expired.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To configure the Yes branch, set up the condition expressions shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_685397" style="width: 429px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685397" class="wp-image-685397 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212.png" alt="jBPM settings for what to do if the task is expired." width="419" height="272" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212.png 419w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-212-300x195.png 300w" sizes="(max-width: 419px) 100vw, 419px" /&gt;&lt;p id="caption-attachment-685397" class="wp-caption-text"&gt;Figure 5: Defining the behavior if your task is expired.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Suppressed? gate&lt;/h3&gt; &lt;p&gt;The Suppressed? exclusive gate&amp;#8217;s two branches should be configured using the &lt;code&gt;suppressed&lt;/code&gt; boolean attribute of the Task class, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_685547" style="width: 306px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685547" class="wp-image-685547 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-49-17-Fig-1.png" alt="" width="296" height="291" /&gt;&lt;p id="caption-attachment-685547" class="wp-caption-text"&gt;Figure 6: Defining behavior depending on whether or not your task needs to be suppressed.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 7 shows the configuration for the Yes branch.&lt;/p&gt; &lt;div id="attachment_685557" style="width: 295px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685557" class="wp-image-685557 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213.png" alt="jBPM configuration for suppressing a task" width="285" height="327" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213.png 285w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-213-261x300.png 261w" sizes="(max-width: 285px) 100vw, 285px" /&gt;&lt;p id="caption-attachment-685557" class="wp-caption-text"&gt;Figure 7: Entering the Yes branch.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The suppression of the task is accomplished by a timer. The timer causes the process to wait for the period specified in the Task object&amp;#8217;s &lt;code&gt;suppressionPeriod&lt;/code&gt; attribute, as shown in Figure 8.&lt;/p&gt; &lt;div id="attachment_685567" style="width: 290px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-685567" class="wp-image-685567 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-214.png" alt="" width="280" height="263" /&gt;&lt;p id="caption-attachment-685567" class="wp-caption-text"&gt;Figure 8: Defining the suppression timer.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The human task&lt;/h3&gt; &lt;p&gt;Now, let&amp;#8217;s focus on the human task, as shown in Figure 9.&lt;/p&gt; &lt;div id="attachment_686037" style="width: 512px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686037" class="wp-image-686037 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2.png" alt="Workflow diagram focused on the human task" width="502" height="568" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2.png 502w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/2019-12-19_11-58-37-Fig-2-265x300.png 265w" sizes="(max-width: 502px) 100vw, 502px" /&gt;&lt;p id="caption-attachment-686037" class="wp-caption-text"&gt;Figure 9: Defining the human task.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Configure the human task using the settings shown in Figure 10.&lt;/p&gt; &lt;div id="attachment_686047" style="width: 432px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686047" class="wp-image-686047 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1.png" alt="jBPM showing task actor setup" width="422" height="703" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1.png 422w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-1-180x300.png 180w" sizes="(max-width: 422px) 100vw, 422px" /&gt;&lt;p id="caption-attachment-686047" class="wp-caption-text"&gt;Figure 10: Implementing the human (actor) task.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;The task actor is resolved from the task actor assignment process variable.&lt;/p&gt; &lt;p&gt;Next, there are a couple of abilities you will want: To capture text as well as supplemental uploaded documentation and to complete the task with a Not Applicable or Not Available response. These requirements can be satisfied by configuring the task parameters as you see in Figure 11.&lt;/p&gt; &lt;div id="attachment_686077" style="width: 606px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686077" class="wp-image-686077 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2.png" alt="JBPM Data Outputs and Assignments section filled in for this task." width="596" height="376" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2.png 596w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Task-2-300x189.png 300w" sizes="(max-width: 596px) 100vw, 596px" /&gt;&lt;p id="caption-attachment-686077" class="wp-caption-text"&gt;Figure 11: Defining the task&amp;#8217;s parameters to capture the types of data you need.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You also need to satisfy the requirement of sending a periodic reminder to the task actor. There is a built-in &lt;a href="https://docs.jboss.org/jbpm/release/latest/jbpm-docs/html_single/#_email_notifications" target="_blank" rel="noopener noreferrer"&gt;notification capability in jBPM&lt;/a&gt; that allows sending email to notify groups and individuals to complete a task. For example, you could configure notifications for the Task activity as you see in Figure 12.&lt;/p&gt; &lt;div&gt; &lt;div id="attachment_686107" style="width: 542px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686107" class="wp-image-686107 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003.png" alt="jBPM Notification configuration for task state type not completed." width="532" height="664" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003.png 532w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-0003-240x300.png 240w" sizes="(max-width: 532px) 100vw, 532px" /&gt;&lt;p id="caption-attachment-686107" class="wp-caption-text"&gt;Figure 12: Reminding your humans to complete their tasks.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In many cases, the built-in notification capability may be adequate. However, there are cases where one would need more control over the notification process. The advantage of using timers for this purpose allows you to design as complex a reminder process as you want. In this example, you will implement timer-based reminders.Configure the timer on the task border, which will trigger the first reminder after the period of time defined in the &lt;code&gt;reminderInitiation&lt;/code&gt; attribute of the &lt;code&gt;Task&lt;/code&gt; object as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_686127" style="width: 357px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686127" class="wp-image-686127 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100.png" alt="jBPM implementing the first task reminder" width="347" height="327" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100.png 347w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-100-300x283.png 300w" sizes="(max-width: 347px) 100vw, 347px" /&gt;&lt;p id="caption-attachment-686127" class="wp-caption-text"&gt;Figure 13: Triggering the first reminder.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Reminder subprocess&lt;/h3&gt; &lt;p&gt;Now you should configure the subprocess &lt;code&gt;Reminder&lt;/code&gt;, as shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_686147" style="width: 446px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686147" class="wp-image-686147 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1.png" alt="jBPM creating the Reminder subprocess" width="436" height="597" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1.png 436w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-1-219x300.png 219w" sizes="(max-width: 436px) 100vw, 436px" /&gt;&lt;p id="caption-attachment-686147" class="wp-caption-text"&gt;Figure 14: Creating the &lt;code&gt;Reminder&lt;/code&gt; subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Set the subprocess parameters to be the &lt;code&gt;Reminder&lt;/code&gt; and &lt;code&gt;Task&lt;/code&gt; objects, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_686157" style="width: 606px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686157" class="wp-image-686157 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2.png" alt="jBPM setting up the subprocess's data" width="596" height="312" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2.png 596w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Reminder-2-300x157.png 300w" sizes="(max-width: 596px) 100vw, 596px" /&gt;&lt;p id="caption-attachment-686157" class="wp-caption-text"&gt;Figure 15: Configuring the subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After completion of the task, a signal should be sent to stop the reminder subprocess, as shown in Figure 16.&lt;/p&gt; &lt;div id="attachment_686167" style="width: 327px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686167" class="wp-image-686167 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3.png" alt="jBPM creating a signal that will stop a project." width="317" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-3-300x203.png 300w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;p id="caption-attachment-686167" class="wp-caption-text"&gt;Figure 16: Creating the stop signal.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The &amp;#8220;What type of close?&amp;#8221; gate&lt;/h3&gt; &lt;p&gt;An exclusive gate decides if the task close state should be soft or hard. The soft close branch of the gate looks like what you see in Figure 17.&lt;/p&gt; &lt;div id="attachment_686187" style="width: 321px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686187" class="wp-image-686187 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4.png" alt="jBPM setting up for the value SOFT" width="311" height="421" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4.png 311w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-4-222x300.png 222w" sizes="(max-width: 311px) 100vw, 311px" /&gt;&lt;p id="caption-attachment-686187" class="wp-caption-text"&gt;Figure 17: Configuring the soft-close branch.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;And the hard-close branch is shown in Figure 18.&lt;/p&gt; &lt;div id="attachment_686197" style="width: 331px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686197" class="wp-image-686197 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5.png" alt="jBPM setting up for the value HARD." width="321" height="422" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5.png 321w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-5-228x300.png 228w" sizes="(max-width: 321px) 100vw, 321px" /&gt;&lt;p id="caption-attachment-686197" class="wp-caption-text"&gt;Figure 18: Configuring the hard-close branch.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;The Hard Close embedded subprocess&lt;/h3&gt; &lt;p&gt;If the task close is hard, the process must wait for a confirmation signal coming from an external system. You have to configure this in an embedded subprocess because of the escalation requirement.&lt;/p&gt; &lt;p&gt;This subprocess is simple. There is just an intermediate signal catch, as shown in Figure 19.&lt;/p&gt; &lt;div id="attachment_686217" style="width: 323px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686217" class="wp-image-686217 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal.png" alt="jBPM catching the hard close signal." width="313" height="210" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal.png 313w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-hard-close-signal-300x201.png 300w" sizes="(max-width: 313px) 100vw, 313px" /&gt;&lt;p id="caption-attachment-686217" class="wp-caption-text"&gt;Figure 19: Catching the signal for a hard close.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You also need to implement an escalation subprocess if the task is not closed in a given time. Again, jBPM has a built-in capability to reassign a task if it is not completed in a timely fashion. For example, you could configure how to reassign the task as you see in Figure 20.&lt;/p&gt; &lt;div id="attachment_686237" style="width: 607px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686237" class="wp-image-686237 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004.png" alt="jBPM's Reassignment section set to escalate a task that was not completed in time." width="597" height="286" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004.png 597w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-00004-300x144.png 300w" sizes="(max-width: 597px) 100vw, 597px" /&gt;&lt;p id="caption-attachment-686237" class="wp-caption-text"&gt;Figure 20: Escalating (reassigning) a task that wasn&amp;#8217;t completed in a timely fashion.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;However, you need to base the reassignment after receiving confirmation from an external system that the task was closed. Moreover, the period must be configurable as a variable, because this value depends on the specific task. Because of these reasons, you need to implement the escalation as a timer-triggered subprocess.&lt;/p&gt; &lt;p&gt;A border timer determines when an escalation is needed based on the value of the &lt;code&gt;escalationTimer&lt;/code&gt; attribute of the &lt;code&gt;Task&lt;/code&gt; object, as shown in Figure 21.&lt;/p&gt; &lt;div id="attachment_686257" style="width: 331px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686257" class="wp-image-686257 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer.png" alt="jBPM setting the task to fire once when it's time." width="321" height="318" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer.png 321w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-escalation-timer-300x297.png 300w" sizes="(max-width: 321px) 100vw, 321px" /&gt;&lt;p id="caption-attachment-686257" class="wp-caption-text"&gt;Figure 21: Configuring the escalation border timer.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;There is yet another way to implement SLA escalations. The &lt;a href="https://docs.jboss.org/drools/release/7.31.0.Final/kie-api-javadoc/org/kie/api/event/process/ProcessEventListener.html" target="_blank" rel="noopener noreferrer"&gt;&lt;code&gt;ProcessEventListener&lt;/code&gt; interface&lt;/a&gt; has two methods that capture the event of an SLA violation and can be implemented with custom code specifying what to do in such an event, as you can see in &lt;a href="https://gist.github.com/mauriziocarioli/4a8dac4b85c6aed698a96b3b6a49ca6f" target="_blank" rel="noopener noreferrer"&gt;this example implementation&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;/** * @param event */ public void beforeSLAViolated(SLAViolatedEvent event) { System.out.println( "Process &amp;#60;&amp;#60;"+ event.getProcessInstance().getProcessName()+ "&amp;#62;&amp;#62;-&amp;#60;"+ event.getProcessInstance().getId()+ "&amp;#62; -&amp;#62;SLA &amp;#60;&amp;#60;"+ event.getNodeInstance().getNodeName()+"&amp;#62;&amp;#62;-&amp;#60;"+ event.getNodeInstance().getNodeId()+"&amp;#62;-&amp;#60;"+ event.getNodeInstance().getId()+ "&amp;#62; SLA is about to be violated." ); } /** * @param event */ public void afterSLAViolated(SLAViolatedEvent event) { System.out.println( "Process &amp;#60;&amp;#60;"+ event.getProcessInstance().getProcessName()+ "&amp;#62;&amp;#62;-&amp;#60;"+ event.getProcessInstance().getId()+ "&amp;#62; -&amp;#62;SLA &amp;#60;&amp;#60;"+ event.getNodeInstance().getNodeName()+"&amp;#62;&amp;#62;-&amp;#60;"+ event.getNodeInstance().getNodeId()+"&amp;#62;-&amp;#60;"+ event.getNodeInstance().getId()+ "&amp;#62; SLA has been violated." ); }&lt;/pre&gt; &lt;h3&gt;The Escalation subprocess&lt;/h3&gt; &lt;p&gt;Now, configure the Escalation subprocess, as shown in Figure 22.&lt;/p&gt; &lt;div id="attachment_686277" style="width: 315px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686277" class="wp-image-686277 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6.png" alt="jBPM setting the Escalation subprocess to independent and wait for completion." width="305" height="302" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6.png 305w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-Fig-6-300x297.png 300w" sizes="(max-width: 305px) 100vw, 305px" /&gt;&lt;p id="caption-attachment-686277" class="wp-caption-text"&gt;Figure 22: Creating the Escalation subprocess.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Then define the parameters of the subprocess. You need to pass the &lt;code&gt;Task&lt;/code&gt; and the &lt;code&gt;TaskActorAssignment&lt;/code&gt; objects, as you can see in Figure 23.&lt;/p&gt; &lt;div id="attachment_686287" style="width: 604px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-686287" class="wp-image-686287 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2.png" alt="" width="594" height="311" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2.png 594w, https://developers.redhat.com/blog/wp-content/uploads/2020/02/PHM-Processes-call-Escalate-2-300x157.png 300w" sizes="(max-width: 594px) 100vw, 594px" /&gt;&lt;p id="caption-attachment-686287" class="wp-caption-text"&gt;Figure 23: Defining the data the Escalation subprocess uses.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;So far in this series, we have defined the business use case for our health management event-driven business process, and have created our data model, trigger process, and task subprocess with all of its components. In the next installment, we will complete our example configuration.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#38;linkname=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F02%2F20%2Fdesigning-an-event-driven-process-at-scale-part-2%2F&amp;#038;title=Designing%20an%20event-driven%20process%20at%20scale%3A%20Part%202" data-a2a-url="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/" data-a2a-title="Designing an event-driven process at scale: Part 2"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/"&gt;Designing an event-driven process at scale: Part 2&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/SwLTai92w4I" height="1" width="1" alt=""/&gt;</content><summary>In the first article in this series, Designing an event-driven business process at scale: A health management example, Part 1, we began by defining the business use case and data model for a concrete example from the health management industry. We then began implementing the example in jBPM (an open source business automation suite) by creating our trigger process. Now, in the second article in th...</summary><dc:creator>mcarioli</dc:creator><dc:date>2020-02-20T08:00:31Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/02/20/designing-an-event-driven-process-at-scale-part-2/</feedburner:origLink></entry><entry><title>Integrating with SaaS Applications - Example CRM Integration</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hFHJxww8NNE/integrating-saas-applications-example-crm-integration.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Architecture Blueprints" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integrating_with_saas_applications_example_crm_integration</id><updated>2020-02-20T06:00:01Z</updated><published>2020-02-20T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s1600/integrate-saas-apps-ld.png" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img alt="integrating with SaaS applications" border="0" data-original-height="900" data-original-width="1600" height="180" src="https://1.bp.blogspot.com/-AzXG8srNP44/Xj-t6bgALLI/AAAAAAAABnw/lgKidHnFpYYF8hikQzFZIgT313nlBAgiACLcBGAsYHQ/s320/integrate-saas-apps-ld.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Part 3 - Example CRM integration&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;The previous article in this series looked at &lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;common architectural elements&lt;/a&gt; for integrating with SaaS applications.&lt;br /&gt;&lt;br /&gt;The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution.&lt;br /&gt;&lt;br /&gt;It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched.&lt;br /&gt;&lt;br /&gt;Having completed the outline of the blueprint details and the resulting logical diagram elements, it's now time to take a look as specific examples. &lt;br /&gt;&lt;br /&gt;In this article you'll walk through a specific example where organizations are looking at integrating with external customer relationship management (CRM) applications. This is done to leverage pushing and pulling information from their organization to and from the CRM application. &lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Blueprint scenarios&lt;/h3&gt;As a reminder, the architectural details covered here are base on real customer integration solutions using open source technologies.&lt;br /&gt;&lt;br /&gt;The example scenario presented here is a generic common blueprint that was uncovered researching customer solutions. It's my intent to provide a blueprint that provides guidance and not deep technical details.&lt;br /&gt;&lt;br /&gt;This section covers the visual representations as presented. There are many ways to represent each element in this architectural blueprint, but I've chosen icons, text and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;br /&gt;&lt;br /&gt;Now let's take a look at the details in this blueprint and outline the solution.&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Integrating with CRM applications&lt;/h3&gt;The example blueprint shown in figure titled &lt;i&gt;Example: External CRM Integration&lt;/i&gt; outlines how to integrate an external SaaS CRM application in to your architecture. Note that this diagram is focusing narrowly on the aspects related to integrating with anb external SaaS CRM application, therefore it's detailing a small set of integration components.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s1600/crm-saas-integration.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="integrating with CRM applications" border="0" data-original-height="825" data-original-width="1600" height="165" src="https://1.bp.blogspot.com/-L8bh3a6QIUg/Xk0-W0_RmSI/AAAAAAAAw5c/8UQfJCmRsrkLDCo7HlSnPsgAB_4mVMauwCNcBGAsYHQ/s320/crm-saas-integration.png" title="" width="320" /&gt;&lt;/a&gt;In this example, starting from the top left corner, the &lt;i&gt;web application &lt;/i&gt;is the entry point for users and can be more than just a web application. It represents everything from partners, customers, to internal employee interfacing as an entry point with the organizations architecture.&lt;br /&gt;&lt;br /&gt;This connects to your services through an &lt;i&gt;API gateway&lt;/i&gt;. It's leveraging a group of &lt;i&gt;frontend microservices&lt;/i&gt; that provide needed functionality, everything from simple to the complex activities that front end application need to service their clients.&lt;br /&gt;&lt;br /&gt;&lt;i&gt;Frontend microservices&lt;/i&gt; are also gathering data and information from the various organizational backend systems by working through &lt;i&gt;integration microservices&lt;/i&gt;. There is a conscience effort here to keep this blueprint example as concise as possible, therefore the integration of various potential back-end systems has been simplified to just the &lt;i&gt;external SaaS CRM application&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;When interaction with organizational processes is desired, you can leverage the &lt;i&gt;process microservices&lt;/i&gt; that expose process automation functionality. These in turn make use of the &lt;i&gt;integration microservices&lt;/i&gt; for interacting with the &lt;i&gt;external SaaS CRM application&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;For completeness, the &lt;i&gt;single-sign-on (SSO) server&lt;/i&gt; and its integration with the organizations &lt;i&gt;active directory server&lt;/i&gt; is shown. This represents the pervasive nature of security as all microservices should have an SSO plugin assisting with authentication and authorization tasks.&lt;br /&gt;&lt;h3&gt;What's next&lt;/h3&gt;&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;An overview of the series on integrating SaaS applications portfolio architecture blueprint can be found here:&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/01/integrating-saas-applications-an-introduction.html" target="_blank"&gt;An introduction&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-common-architectural-elements.html" target="_blank"&gt;Common architectural elements&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.schabell.org/2020/02/integrating-saas-applications-example-crm-integration.html" target="_blank"&gt;Example CRM integration&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Example CRM connector integration &lt;/li&gt;&lt;li&gt;Example 3rd-party platform integration&lt;/li&gt;&lt;li&gt;Example processes with 3rd-party platform integration&lt;/li&gt;&lt;/ol&gt;Catch up on any articles you missed by following one of the links above.&lt;br /&gt;&lt;br /&gt;Next in this series, taking a look at more details when connecting to external SaaS CRM applications using a specific connector.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=mdJQxFhQ08s:LZzPO1oUZT4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=mdJQxFhQ08s:LZzPO1oUZT4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/mdJQxFhQ08s" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hFHJxww8NNE" height="1" width="1" alt=""/&gt;</content><summary>Part 3 - Example CRM integrationThe previous article in this series looked at common architectural elements for integrating with SaaS applications. The foundation for this logical diagram was researching a use case where customers were successful with a portfolio solution. It's a starting point for the generic architectural blueprint that rises from several customer solution that were researched. ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-02-20T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/mdJQxFhQ08s/integrating-saas-applications-example-crm-integration.html</feedburner:origLink></entry></feed>
